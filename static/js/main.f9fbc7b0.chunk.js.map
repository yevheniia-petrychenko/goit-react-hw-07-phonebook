{"version":3,"sources":["redux/actions.jsx","redux/reducer.jsx","redux/store.jsx","components/ContactList/ContactCard.jsx","operations/operations.jsx","selectors/selectors.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/spiner/spiner.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["fetchRequest","createAction","fetchSuccess","fetchError","addRequest","addSuccess","addError","deleteRequest","deleteSuccess","deleteError","filter","items","createReducer","state","payload","id","contactFilter","_","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","devTools","process","ContactCard","name","number","onDelete","className","onClick","axios","defaults","baseURL","getIsLoading","getFilter","getVisibleContact","createSelector","normalizedFilter","toLowerCase","includes","connect","dispatch","onDeleteContact","delete","then","catch","error","deleteContact","map","ContactForm","formReset","setState","handleSubmit","event","preventDefault","console","log","props","found","forEach","item","alert","onSubmit","handleInputChange","currentTarget","value","this","type","onChange","Component","contact","post","data","addContact","Spiner","color","height","width","timeout","target","App","fetchContact","isLoading","get","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9fbc7b0.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchRequest = createAction('contacts/fetchRequest');\r\nconst fetchSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchError = createAction('contacts/fetchError');\r\n\r\nconst addRequest = createAction('contacts/addRequest');\r\nconst addSuccess = createAction('contacts/addSuccess');\r\nconst addError = createAction('contacts/addError');\r\n\r\n// const addContact = createAction('contacts/add', ({ name, number }) => ({\r\n//   payload: {\r\n//     name: name,\r\n//     number: number,\r\n//     id: uuidv4(),\r\n//   },\r\n// }));\r\n\r\n// const addContact = contacts => ({\r\n//   type: 'contacts/add',\r\n//   payload: {\r\n//     name: contacts.item.name,\r\n//     number: contacts.item.number,\r\n//     id: uuidv4(),\r\n//   },\r\n// });\r\n\r\nconst deleteRequest = createAction('contacts/deleteRequest');\r\nconst deleteSuccess = createAction('contacts/deleteSuccess');\r\nconst deleteError = createAction('contacts/deleteError');\r\n\r\n// const deleteContact = createAction('contacts/delete');\r\n\r\n// const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\nconst filter = createAction('contacts/contactFilter');\r\n\r\n// const filter = value => ({\r\n//   type: 'contacts/filter',\r\n//   payload: value,\r\n// });\r\nexport {\r\n  addRequest,\r\n  addSuccess,\r\n  addError,\r\n  deleteRequest,\r\n  deleteSuccess,\r\n  deleteError,\r\n  fetchRequest,\r\n  fetchSuccess,\r\n  fetchError,\r\n  filter,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport {\r\n  addSuccess,\r\n  addRequest,\r\n  addError,\r\n  deleteRequest,\r\n  deleteSuccess,\r\n  deleteError,\r\n  fetchRequest,\r\n  fetchSuccess,\r\n  fetchError,\r\n  filter,\r\n} from './actions';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nconst items = createReducer([], {\r\n  [fetchSuccess]: (state, { payload }) => payload,\r\n  [addSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst contactFilter = createReducer('', {\r\n  [filter]: (_, { payload }) => payload,\r\n});\r\n\r\n// const contactFilter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case [filter]:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchSuccess]: () => false,\r\n  [fetchRequest]: () => true,\r\n  [fetchError]: () => false,\r\n  [addSuccess]: () => false,\r\n  [addRequest]: () => true,\r\n  [addError]: () => false,\r\n  [deleteSuccess]: () => false,\r\n  [deleteRequest]: () => true,\r\n  [deleteError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  contactFilter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport reducer from './reducer';\r\n\r\n// const rootReducer = {\r\n//   contacts: reducer,\r\n// };\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: reducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst ContactCard = ({ name, number, id, onDelete }) => {\r\n  return (\r\n    <li key={id}>\r\n      <span>{name}</span>\r\n      <span>{number}</span>\r\n      <button\r\n        className=\"deleteButton\"\r\n        onClick={() => {\r\n          onDelete(id);\r\n        }}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactCard.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactCard;\r\n","import axios from 'axios';\r\nimport {\r\n  addRequest,\r\n  addSuccess,\r\n  addError,\r\n  deleteRequest,\r\n  deleteSuccess,\r\n  deleteError,\r\n  fetchRequest,\r\n  fetchSuccess,\r\n  fetchError,\r\n} from '../redux/actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040/';\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(fetchRequest());\r\n\r\n  // try {\r\n  //   const { data } = await axios.get('/contacts');\r\n  //   dispatch(fetchSuccess(data));\r\n  // } catch (error) {\r\n  //   dispatch(fetchError(error));\r\n  // }\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchSuccess(data)))\r\n    .catch(error => dispatch(fetchError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  const contact = { name, number };\r\n  dispatch(addRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addSuccess(data)))\r\n    .catch(error => dispatch(addError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteSuccess(id)))\r\n    .catch(error => dispatch(deleteError(error)));\r\n};\r\n\r\nexport { addContact, deleteContact, fetchContact };\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getIsLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.contactFilter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContact = state => {\r\n//   const allContacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\nconst getVisibleContact = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport { getIsLoading, getFilter, getVisibleContact };\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ContactCard from './ContactCard';\r\nimport { deleteContact } from '../../operations/operations';\r\nimport { getVisibleContact } from '../../selectors/selectors';\r\nimport './contactList.css';\r\n\r\nconst ContactList = ({ onDeleteContact, contacts }) => {\r\n  return (\r\n    <ul className=\"contactList\">\r\n      {contacts.map(({ name, number, id }) => {\r\n        return (\r\n          <ContactCard\r\n            name={name}\r\n            number={number}\r\n            id={id}\r\n            key={id}\r\n            onDelete={onDeleteContact}\r\n          />\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContact(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../operations/operations';\r\nimport './contactForm.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    number: '',\r\n    name: '',\r\n  };\r\n\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  formReset = () => {\r\n    this.setState({ number: '', name: '' });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    console.log(this.state.name);\r\n    console.log(this.props.contacts);\r\n    let found = false;\r\n    if (this.state.name === '') {\r\n      alert(`Please provide a name`);\r\n      return;\r\n    }\r\n    this.props.contacts.forEach(item => {\r\n      if (item.name === this.state.name) {\r\n        alert(`${this.state.name} is already in contacts`);\r\n        found = true;\r\n        return;\r\n      }\r\n    });\r\n    if (found) {\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state);\r\n    this.formReset();\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  render() {\r\n    const { number, name } = this.state;\r\n    return (\r\n      <div>\r\n        <form className=\"form\" onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n\r\n          <button className=\"addBtn\">Add Contact</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import Loader from 'react-loader-spinner';\r\n\r\nconst Spiner = () => (\r\n  <Loader\r\n    type=\"Puff\"\r\n    color=\"#00BFFF\"\r\n    height={100}\r\n    width={100}\r\n    timeout={3000} //3 secs\r\n  />\r\n);\r\n\r\nexport default Spiner;\r\n","import './filter.css';\r\nimport { connect } from 'react-redux';\r\nimport { filter } from '../../redux/actions';\r\nimport { getFilter } from '../../selectors/selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filterLabel\">\r\n    Find contacts by name\r\n    <input type=\"text\" name=\"filter\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(filter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactList from './components/ContactList/ContactList';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Spiner from './components/spiner/spiner';\nimport Filter from './components/Filter/Filter';\nimport { fetchContact } from './operations/operations';\nimport { getIsLoading } from './selectors/selectors';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // };\n\n  // formSubmitHandl = ({ name, number }) => {\n  //   let newname = name;\n  //   let found = false;\n  //   this.state.contacts.forEach(({ name }) => {\n  //     if (newname.toLowerCase() === name.toLowerCase()) {\n  //       alert(`${name} is already in contacts`);\n  //       found = true;\n  //       return;\n  //     }\n  //     if (found) {\n  //       return;\n  //     }\n  //   });\n  //   if (found) {\n  //     return;\n  //   }\n  // this.setState(prevState => {\n  //   return {\n  //     contacts: [\n  //       ...prevState.contacts,\n  //       ...[{ name: newname, number: number, id: uuidv4() }],\n  //     ],\n  //   };\n  // });\n  // };\n\n  // getVisibleContact = () => {\n  //   const normalizedFilter = this.state.filter.toLowerCase();\n  //   return this.state.contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // filterHandle = event => {\n  //   this.setState({ filter: event.currentTarget.value });\n  // };\n\n  // deleteContact = id => {\n  //   this.setState(prevState => {\n  //     return {\n  //       contacts: prevState.contacts.filter(contact => contact.id !== id),\n  //     };\n  //   });\n  // };\n\n  componentDidMount() {\n    this.props.fetchContact();\n  }\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"Container\">\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n        {this.props.isLoading && <Spiner />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToPops = state => ({\n  isLoading: getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContact: () => {\n    dispatch(fetchContact());\n  },\n});\n\nexport default connect(mapStateToPops, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n//import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}